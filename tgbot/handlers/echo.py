import random
import re

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.utils.markdown import hcode

from tgbot.text.user import *
from tgbot.misc.states import *

from tgbot.text.admin import num_card, num_sberbank, get_amount_mammoth, get_my_wallets
from tgbot.keyboards.reply_admin import *
from tgbot.text.admin import start_text as start_text_admin

from database.database import add_amount_rub_wallet, add_method_pay, get_wallets

from tgbot.misc.states_user import WalletCommission, AmountBitcoin, get_text_wallet, get_amount, \
    get_text_wallet_buy, WalletShop
from tgbot.keyboards.inline import *
from tgbot.text.user import start_text, choose_wallet


async def bot_echo(message: types.Message):
    text = [
        "–≠—Ö–æ –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è.",
        "–°–æ–æ–±—â–µ–Ω–∏–µ:",
        message.text
    ]

    await message.answer('\n'.join(text))


async def bot_echo_all(message: types.Message, state: FSMContext):
    state_name = await state.get_state()
    print('message - bot_echo_all: ', message)
    if message.document.mime_type == 'application/json':
        pass
    else:
        text = [
            f'–≠—Ö–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {hcode(state_name)}',
            '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:',
            hcode(message.text)
        ]
        await message.answer('\n'.join(text))


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def commands_echo_user(message: types.Message):
    print('message - commands_echo_user: ', message)
    match message.text:
        case _:
            await message.answer("–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞
async def commands_echo_admin(message: types.Message):
    match message.text:
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        case "üí∞ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ö–æ—à–µ–ª—å–∫–∏":
            await message.answer(get_my_wallets(), reply_markup=start_admin_keyboard(), parse_mode="Markdown")
        case "üí≥ –ò–∑–º–µ–Ω–∏—Ç—å Sberbank":
            await CardNumberSberbank.card_number.set()
            await message.answer(num_sberbank, reply_markup=change_admin_wallet())
        case "üí≥ –ò–∑–º–µ–Ω–∏—Ç—å VISA|MASTERCARD|–ú–ò–†":
            await CardNumberVISA.card_number.set()
            await message.answer(num_card, reply_markup=change_admin_wallet())
        case "ü¶£ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ú–∞–º–æ–Ω—Ç–æ–≤":
            await message.answer(get_amount_mammoth())
        case "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            await message.answer(start_text_admin, reply_markup=start_admin_keyboard(), parse_mode="Markdown")
        case _:
            await message.answer("–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")


def register_echo(dp: Dispatcher):
    dp.register_message_handler(commands_echo_user, is_admin=False)
    dp.register_message_handler(commands_echo_admin, is_admin=True)
    dp.register_message_handler(get_text_wallet, state=WalletCommission, is_admin=False)
    dp.register_message_handler(get_amount, state=AmountBitcoin, is_admin=False)
    dp.register_message_handler(get_text_wallet_buy, state=WalletShop, is_admin=False)
    dp.register_message_handler(get_text_sberbank, state=CardNumberSberbank, is_admin=True)
    dp.register_message_handler(get_text_visa, state=CardNumberVISA, is_admin=True)

    async def delete_before_message(query: types.CallbackQuery):
        await query.message.delete()

    # Buy Bitcoin

    @dp.callback_query_handler(text='Buy Bitcoin', is_admin=False)
    async def buy_bitcoins(query: types.CallbackQuery):
        await delete_before_message(query)
        await AmountBitcoin.amount.set()
        await query.message.answer(buy_bitcoin, reply_markup=cancel_inline_user_keyboard(), parse_mode='Markdown')

    @dp.callback_query_handler(text='Sberbank', is_admin=False)
    async def choose_pay_sberbank(query: types.CallbackQuery):
        await delete_before_message(query)
        text = query["message"]["reply_markup"]["inline_keyboard"][0][0]["text"]
        sum_buy = re.search(r'\d{1,1000000000}', text)
        if sum_buy:
            sum_buy = sum_buy.group(0)

        # Add method pay
        await add_method_pay(query.from_user.id, 'Sberbank')

        await add_amount_rub_wallet(query.from_user.id, sum_buy)

        await WalletShop.wallet.set()
        await query.message.answer(choose_wallet, reply_markup=cancel_inline_user_keyboard(), parse_mode='Markdown')

    @dp.callback_query_handler(text='Visa|MasterCard|–ú–ò–†', is_admin=False)
    async def choose_pay_visa(query: types.CallbackQuery):
        await delete_before_message(query)
        text = query["message"]["reply_markup"]["inline_keyboard"][0][0]["text"]
        sum_buy = re.search(r'\d{1,1000000000}', text)
        if sum_buy:
            sum_buy = sum_buy.group(0)

        # Add method pay
        await add_method_pay(query.from_user.id, 'Visa|MasterCard|–ú–ò–†')

        await add_amount_rub_wallet(query.from_user.id, sum_buy)

        await WalletShop.wallet.set()
        await query.message.answer(choose_wallet, reply_markup=cancel_inline_user_keyboard(), parse_mode='Markdown')

    @dp.callback_query_handler(text='Agree Pay', is_admin=False)
    async def agree_pay(query: types.CallbackQuery):
        await delete_before_message(query)
        user = await get_user_wallet(query.from_user.id)
        num_zakaz = random.randint(00000000, 99999999)
        text = f"""
–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É –í–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ ‚Ññ{num_zakaz} *15 –º–∏–Ω—É—Ç!*

```
–í–ê–ñ–ù–û: –ü—Ä–∏ –æ–ø–ª–∞—Ç–µ –ù–ï –ó–ê–ü–û–õ–ù–Ø–ô–¢–ï –ø–æ–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–ª–∞—Ç–µ–∂–∞. –õ—é–±—ã–µ –ø–ª–∞—Ç–µ–∂–∏ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –Ω–µ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –±–æ—Ç–æ–º, –∞ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã! –û–±—Ä–∞—â–∞–µ–º –≤–Ω–∏–º–∞–Ω–∏–µ: —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ —Å–≤–æ–µ–π –ª–∏—á–Ω–æ–π –∫–∞—Ä—Ç—ã. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –∑–∞–¥–µ—Ä–∂–∞—Ç—å –æ–±–º–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –°—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –±–µ–∑ –∑–∞—è–≤–∫–∏, –≤–æ–∑–≤—Ä–∞—Ç—É –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç! –û–ø–ª–∞—á–∏–≤–∞—Ç—å –≤—ã –¥–æ–ª–∂–Ω—ã —Ä–æ–≤–Ω–æ —Ç—É —Å—É–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —É–∫–∞–∑–∞–Ω–∞ –≤ –∑–∞—è–≤–∫–µ, –∏–Ω–∞—á–µ –≤–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ—Ç–µ—Ä—è–µ—Ç—Å—è.  –í—Å–µ –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏ –ø–æ –æ–±–º–µ–Ω—É –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤.
```

–î–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è {user[-2]} BTC, –í–∞–º –Ω–∞–¥–æ –æ–ø–ª–∞—Ç–∏—Ç—å: *{user[-1]} —Ä—É–±.*

–í–∞—à –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: 0 —Ä—É–±.

–ü—Ä–æ–º–æ–∫–æ–¥: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: *{user[-1]} —Ä—É–±.*

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –∫–æ—à–µ–ª–µ–∫: 
```
{user[2]}
```

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å, –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π, –ø–∏—à–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–µ: @{telegram_support}

–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:
        """
        await query.message.answer(
            text,
            parse_mode='Markdown'
        )

        requisites_pay = None

        wallets = get_wallets()

        if user[3] == 'Sberbank':
            requisites_pay = wallets[1]
        elif user[3] == 'Visa|MasterCard|–ú–ò–†':
            requisites_pay = wallets[2]

        await query.message.answer(requisites_pay, parse_mode='Markdown')

    @dp.callback_query_handler(text='Cancel', is_admin=False)
    async def cancel_command(query: types.CallbackQuery):
        await delete_before_message(query)
        await query.message.answer(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=start_inline_user_keyboadr(), parse_mode='Markdown')

    @dp.callback_query_handler(text='Feedback', is_admin=False)
    async def feedback(query: types.CallbackQuery):
        await delete_before_message(query)
        await query.message.answer(feedback_text, reply_markup=start_inline_user_keyboadr(), parse_mode='HTML')

    @dp.callback_query_handler(text='Promocode', is_admin=False)
    async def promo_code(query: types.CallbackQuery):
        await delete_before_message(query)
        await query.message.answer(promocode_text, reply_markup=start_inline_user_keyboadr(), parse_mode='Markdown')

    @dp.callback_query_handler(text='Help Command', is_admin=False)
    async def help_command(query: types.CallbackQuery):
        await delete_before_message(query)
        await query.message.answer(help_text, reply_markup=start_inline_user_keyboadr(), parse_mode='HTML')

    @dp.callback_query_handler(text='Partner Programm', is_admin=False)
    async def partner_program_command(query: types.CallbackQuery):
        await delete_before_message(query)
        await query.message.answer(partner_program, reply_markup=partner_inline_user_keyboard(), parse_mode='Markdown')

    @dp.callback_query_handler(text='Sell Bitcoin', is_admin=False)
    async def sell_bitcoins_command(query: types.CallbackQuery):
        await delete_before_message(query)
        await query.message.answer(sell_bitcoins, reply_markup=cancel_inline_user_keyboard(), parse_mode='Markdown')

    # –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞

    @dp.callback_query_handler(text='My partner link', is_admin=False)
    async def my_partner_link_command(query: types.CallbackQuery):
        await delete_before_message(query)
        await query.message.answer(
            my_partner_link(query.from_user.id), reply_markup=partner_inline_user_keyboard(), parse_mode='Markdown')

    @dp.callback_query_handler(text='My finance', is_admin=False)
    async def my_finance(query: types.CallbackQuery):
        await delete_before_message(query)
        await query.message.answer(my_finance_text(), reply_markup=partner_inline_user_keyboard(), parse_mode='html')

    @dp.callback_query_handler(text='Out commission', is_admin=False)
    async def outback_commission(query: types.CallbackQuery):
        await delete_before_message(query)
        await WalletCommission.wallet.set()
        text = await out_commission(query.from_user.id)
        await query.message.answer(text, reply_markup=partner_inline_user_keyboard(), parse_mode='html')

    @dp.callback_query_handler(text='Outback', is_admin=False)
    async def outback_money(query: types.CallbackQuery):
        await delete_before_message(query)
        await query.message.answer(out_back, reply_markup=partner_inline_user_keyboard(), parse_mode='html')

    @dp.callback_query_handler(text='Back Main Menu', is_admin=False)
    async def back_main(query: types.CallbackQuery):
        await delete_before_message(query)
        await query.message.answer(start_text, reply_markup=start_inline_user_keyboadr(), parse_mode='html')
